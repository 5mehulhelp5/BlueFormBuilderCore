<?php
/**
 * @var \Cytracon\BlueFormBuilderCore\Block\Form\View $block
 */
$coreHelper     = $this->helper('\Cytracon\Core\Helper\Data');
$helper         = $this->helper('\Cytracon\BlueFormBuilderCore\Helper\Data');
$product        = $block->getProduct();
$form           = $block->getCurrentForm();
$submission     = $this->getCurrentSubmission();
$id             = $form->getRandomId();
$jsBeforeSubmit = $form->getJsBeforeSubmit();
$jsAfterSubmit  = $form->getJsAfterSubmit();
$mageScript     = $coreHelper->serialize($this->getMageScript());
$width          = $form->getWidth();
$style          = [];
$styles = '';
if ($width) $styles = 'style="width:' . $width . ';"';
$customCss = $form->getCustomCss();
$publicKey = $helper->getConfig('recaptcha3/public_key');
?>
<?php if ($customCss) { ?>
<style><?= $form->getCustomCss() ?></style>
<?php } ?>
<div id="<?= $form->getContainerId() ?>" class="block bfb <?= $form->getCustomClasses() ?>" <?= $styles ?>>
    <div class="bfb-loading-mask">
        <div class="bfb-spinner">
            <span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>
        </div>
    </div>
    <form class="form bfb-form" action="<?= $this->getSubmitUrl() ?>" method="post" id="<?= $form->getHtmlId() ?>" enctype="multipart/form-data" data-hasrequired="<?= $block->escapeHtmlAttr(__('* Required Fields')) ?>"  data-role="bfb-form" data-mage-init='<?= $mageScript ?>'>
        <?php if ($product && $product->getId()) { ?>
            <input type="hidden" name="product_id" class="bfb-input-hidden" value="<?=  $product->getId() ?>"/>
        <?php } ?>
        <?php if ($submission && $submissionId = $submission->getId()) { ?>
            <input type="hidden" name="submission_id" class="bfb-input-hidden" value="<?= $submissionId ?>"/>
        <?php } ?>
        <input type="hidden" name="bfb_form_key" class="bfb-input-hidden" value="<?= $form->getBfbFormKey() ?>"/>
        <?php if ($form->getEnableRecaptcha()) { ?>
            <input type="hidden" name="g-recaptcha-response" id="gRecaptchaResponse">
            <script src="https://www.google.com/recaptcha/api.js?render=<?= $publicKey ?>"></script>
            <script>
                grecaptcha.ready(function() {
                    grecaptcha.execute('<?= $publicKey ?>', {action: 'bfb_form'}).then(function(token) {
                        var gRecaptchaResponse = document.getElementById('gRecaptchaResponse');
                        gRecaptchaResponse.value = token;
                    });
                });
            </script>
        <?php } ?>
        <?= $this->getProfileHtml() ?>
    </form>
    <?php if ($jsBeforeSubmit) { ?>
        <div class="bfb-form-<?= $id ?>beforesubmit bfb-form-js"><?= $jsBeforeSubmit ?></div>
    <?php } ?>
    <?php if ($jsAfterSubmit) { ?>
        <div class="bfb-form-<?= $id ?>aftersubmit bfb-form-js"><?= $jsAfterSubmit ?></div>
    <?php } ?>
    <?php if ($jsOnPageLoad = $form->getJsOnPageload()) { ?>
        <div class="bfb-form-<?= $id ?>pageload bfb-form-js"><?= $jsOnPageLoad ?></div>
        <script type="text/javascript">
            require(['jquery'], function($) {
                jQuery(document).ready(function($) {
                    eval($('.bfb-form-<?= $id ?>pageload').html());
                    $('.bfb-form-<?= $id ?>pageload').remove();
                });
            });
        </script>
    <?php } ?>
    <script type="text/x-magento-init">
        {
            "#<?= $form->getHtmlId() ?>": {
                "Cytracon_BlueFormBuilderCore/js/rules": {},
                "Cytracon_BlueFormBuilderCore/js/validate-review": {},
                "Cytracon_BlueFormBuilderCore/js/validate-file": {},
                "Cytracon_BlueFormBuilderCore/js/validate-phone": {}
            }
        }
    </script>

    <script>
        (function () {
            // Enable/disable: localStorage.setItem('bfbDebug','1') / '0'
            var debug = (function () {
                try { return localStorage.getItem('bfbDebug') !== '0'; } catch(e) { return true; }
            })();
            if (!debug) return;

            var formId = "<?= $form->getHtmlId() ?>";
            var formEl = document.getElementById(formId);
            if (!formEl) return;

            function safeEntriesFromFormData(fd) {
                var out = [];
                try {
                    fd.forEach(function (v, k) {
                        if (v instanceof File) {
                            out.push({ key: k, file: v.name, size: v.size, type: v.type });
                        } else {
                            var s = String(v);
                            out.push({ key: k, value: s.length > 300 ? s.slice(0, 300) + 'â€¦' : s });
                        }
                    });
                } catch (e) {
                    console.warn('BFB: Failed to inspect FormData', e);
                }
                return out;
            }

            console.info('BFB: Debug enabled for form #' + formId);

            // Log form submit + payload snapshot
            formEl.addEventListener('submit', function (e) {
                try {
                    var fd = new FormData(formEl);
                    console.log('BFB: submit', {
                        action: formEl.action,
                        method: formEl.method,
                        enctype: formEl.enctype || formEl.getAttribute('enctype'),
                        entries: safeEntriesFromFormData(fd)
                    });
                } catch (err) {
                    console.warn('BFB: submit payload inspection failed', err);
                }
            }, true);

            // jQuery.ajax tracing (if jQuery present)
            (function ($) {
                if (!window.jQuery || !$.ajaxPrefilter) return;
                $.ajaxPrefilter(function (options, originalOptions, jqXHR) {
                    try {
                        var isFormAction = String(options.url || '').indexOf(formEl.action) !== -1;
                        if (!isFormAction && !(originalOptions && originalOptions.data instanceof FormData)) return;
                        console.log('BFB: $.ajax', {
                            type: options.type,
                            url: options.url,
                            processData: options.processData,
                            contentType: options.contentType
                        });
                        jqXHR.always(function (_, statusText) {
                            console.log('BFB: $.ajax complete', {
                                url: options.url,
                                status: jqXHR.status,
                                statusText: statusText
                            });
                        });
                    } catch (e) {}
                });
            })(window.jQuery || window.$ || {});

            // fetch() tracing
            if (window.fetch && !window.fetch.__bfbWrapped) {
                var _fetch = window.fetch;
                window.fetch = function (input, init) {
                    try {
                        var url = (typeof input === 'string') ? input : (input && input.url);
                        var method = (init && init.method) || 'GET';
                        var body = init && init.body;
                        var isFormAction = url && String(url).indexOf(formEl.action) !== -1;
                        if (isFormAction) {
                            console.log('BFB: fetch', { method: method, url: url });
                            if (body instanceof FormData) {
                                console.log('BFB: fetch FormData', safeEntriesFromFormData(body));
                            }
                        }
                    } catch (e) {}
                    return _fetch.apply(this, arguments).then(function (resp) {
                        try {
                            console.log('BFB: fetch response', { url: resp.url, status: resp.status });
                        } catch (e) {}
                        return resp;
                    }).catch(function (err) {
                        console.error('BFB: fetch error', err);
                        throw err;
                    });
                };
                window.fetch.__bfbWrapped = true;
            }

            // XMLHttpRequest tracing
            if (window.XMLHttpRequest && !XMLHttpRequest.prototype.__bfbWrapped) {
                var _open = XMLHttpRequest.prototype.open;
                var _send = XMLHttpRequest.prototype.send;
                XMLHttpRequest.prototype.open = function (method, url) {
                    this.__bfbInfo = { method: method, url: url };
                    return _open.apply(this, arguments);
                };
                XMLHttpRequest.prototype.send = function (body) {
                    try {
                        var i = this.__bfbInfo || {};
                        var isFormAction = i.url && String(i.url).indexOf(formEl.action) !== -1;
                        if (isFormAction) {
                            console.log('BFB: XHR send', i);
                            if (body instanceof FormData) {
                                console.log('BFB: XHR FormData', safeEntriesFromFormData(body));
                            }
                            this.addEventListener('load', function () {
                                console.log('BFB: XHR load', { url: this.responseURL || i.url, status: this.status });
                            });
                            this.addEventListener('error', function () {
                                console.error('BFB: XHR error', i);
                            });
                            this.addEventListener('abort', function () {
                                console.warn('BFB: XHR abort', i);
                            });
                        }
                    } catch (e) {}
                    return _send.apply(this, arguments);
                };
                XMLHttpRequest.prototype.__bfbWrapped = true;
            }
        })();
    </script>
</div>